

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Sun Aug 02 14:26:32 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    23                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    25  0000                     
    26                           ; Version 2.20
    27                           ; Generated 05/05/2020 GMT
    28                           ; 
    29                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F25K22 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	idataBANK0
    62  00029C                     __pidataBANK0:
    63                           	callstack 0
    64                           
    65                           ;initializer for _colors
    66  00029C  00                 	db	0
    67  00029D  00                 	db	0
    68  00029E  00                 	db	0
    69  00029F  FF                 	db	255
    70  0002A0  FF                 	db	255
    71  0002A1  FF                 	db	255
    72  0002A2  FF                 	db	255
    73  0002A3  00                 	db	0
    74  0002A4  00                 	db	0
    75  0002A5  DF                 	db	223
    76  0002A6  20                 	db	32
    77  0002A7  00                 	db	0
    78  0002A8  BF                 	db	191
    79  0002A9  40                 	db	64
    80  0002AA  00                 	db	0
    81  0002AB  9F                 	db	159
    82  0002AC  60                 	db	96
    83  0002AD  00                 	db	0
    84  0002AE  80                 	db	128
    85  0002AF  80                 	db	128
    86  0002B0  00                 	db	0
    87  0002B1  60                 	db	96
    88  0002B2  9F                 	db	159
    89  0002B3  00                 	db	0
    90  0002B4  40                 	db	64
    91  0002B5  BF                 	db	191
    92  0002B6  00                 	db	0
    93  0002B7  20                 	db	32
    94  0002B8  DF                 	db	223
    95  0002B9  00                 	db	0
    96  0002BA  00                 	db	0
    97  0002BB  FF                 	db	255
    98  0002BC  00                 	db	0
    99  0002BD  00                 	db	0
   100  0002BE  DF                 	db	223
   101  0002BF  20                 	db	32
   102  0002C0  00                 	db	0
   103  0002C1  BF                 	db	191
   104  0002C2  40                 	db	64
   105  0002C3  00                 	db	0
   106  0002C4  9F                 	db	159
   107  0002C5  60                 	db	96
   108  0002C6  00                 	db	0
   109  0002C7  80                 	db	128
   110  0002C8  80                 	db	128
   111  0002C9  00                 	db	0
   112  0002CA  60                 	db	96
   113  0002CB  9F                 	db	159
   114  0002CC  00                 	db	0
   115  0002CD  40                 	db	64
   116  0002CE  BF                 	db	191
   117  0002CF  00                 	db	0
   118  0002D0  20                 	db	32
   119  0002D1  DF                 	db	223
   120  0002D2  00                 	db	0
   121  0002D3  00                 	db	0
   122  0002D4  FF                 	db	255
   123  0002D5  20                 	db	32
   124  0002D6  00                 	db	0
   125  0002D7  DF                 	db	223
   126  0002D8  40                 	db	64
   127  0002D9  00                 	db	0
   128  0002DA  BF                 	db	191
   129  0002DB  60                 	db	96
   130  0002DC  00                 	db	0
   131  0002DD  9F                 	db	159
   132  0002DE  80                 	db	128
   133  0002DF  00                 	db	0
   134  0002E0  80                 	db	128
   135  0002E1  9F                 	db	159
   136  0002E2  00                 	db	0
   137  0002E3  60                 	db	96
   138  0002E4  BF                 	db	191
   139  0002E5  00                 	db	0
   140  0002E6  40                 	db	64
   141  0002E7  DF                 	db	223
   142  0002E8  00                 	db	0
   143  0002E9  20                 	db	32
   144  0000                     _ANSELC	set	3898
   145  0000                     _ANSELB	set	3897
   146  0000                     _ANSELA	set	3896
   147  0000                     _LATC	set	3979
   148  0000                     _LATB	set	3978
   149  0000                     _LATA	set	3977
   150  0000                     _PORTC	set	3970
   151  0000                     _PORTB	set	3969
   152  0000                     _PORTA	set	3968
   153  0000                     _TRISC	set	3988
   154  0000                     _TRISB	set	3987
   155  0000                     _TRISA	set	3986
   156  0000                     _OSCCONbits	set	4051
   157  0000                     _PORTBbits	set	3969
   158  0000                     _RCONbits	set	4048
   159  0000                     _LATAbits	set	3977
   160  0000                     _LATCbits	set	3979
   161  0000                     _PORTCbits	set	3970
   162  0000                     _IOCBbits	set	3938
   163  0000                     _INTCON2bits	set	4081
   164  0000                     _INTCONbits	set	4082
   165  0000                     _TMR0L	set	4054
   166  0000                     _TMR0H	set	4055
   167  0000                     _T0CONbits	set	4053
   168                           
   169                           ; #config settings
   170                           
   171                           	psect	cinit
   172  0002EA                     __pcinit:
   173                           	callstack 0
   174  0002EA                     start_initialization:
   175                           	callstack 0
   176  0002EA                     __initialization:
   177                           	callstack 0
   178                           
   179                           ; Initialize objects allocated to BANK0 (78 bytes)
   180                           ; load TBLPTR registers with __pidataBANK0
   181  0002EA  0E9C               	movlw	low __pidataBANK0
   182  0002EC  6EF6               	movwf	tblptrl,c
   183  0002EE  0E02               	movlw	high __pidataBANK0
   184  0002F0  6EF7               	movwf	tblptrh,c
   185  0002F2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   186  0002F4  6EF8               	movwf	tblptru,c
   187  0002F6  EE00  F060         	lfsr	0,__pdataBANK0
   188  0002FA  EE10 F04E          	lfsr	1,78
   189  0002FE                     copy_data0:
   190  0002FE  0009               	tblrd		*+
   191  000300  CFF5 FFEE          	movff	tablat,postinc0
   192  000304  50E5               	movf	postdec1,w,c
   193  000306  50E1               	movf	fsr1l,w,c
   194  000308  E1FA               	bnz	copy_data0
   195                           
   196                           ; Clear objects allocated to COMRAM (23 bytes)
   197  00030A  EE00  F001         	lfsr	0,__pbssCOMRAM
   198  00030E  0E17               	movlw	23
   199  000310                     clear_0:
   200  000310  6AEE               	clrf	postinc0,c
   201  000312  06E8               	decf	wreg,f,c
   202  000314  E1FD               	bnz	clear_0
   203  000316                     end_of_initialization:
   204                           	callstack 0
   205  000316                     __end_of__initialization:
   206                           	callstack 0
   207  000316  9025               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   208  000318  9225               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   209  00031A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   210  00031C  6EF8               	movwf	tblptru,c
   211  00031E  0100               	movlb	0
   212  000320  EFCB  F001         	goto	_main	;jump to C main() function
   213                           
   214                           	psect	bssCOMRAM
   215  000001                     __pbssCOMRAM:
   216                           	callstack 0
   217  000001                     _rotary:
   218                           	callstack 0
   219  000001                     	ds	13
   220  00000E                     _PWMDutty:
   221                           	callstack 0
   222  00000E                     	ds	4
   223  000012                     _Ticks:
   224                           	callstack 0
   225  000012                     	ds	2
   226  000014                     _ticksRGB:
   227                           	callstack 0
   228  000014                     	ds	2
   229  000016                     _color:
   230                           	callstack 0
   231  000016                     	ds	1
   232  000017                     _levelColor:
   233                           	callstack 0
   234  000017                     	ds	1
   235                           
   236                           	psect	dataBANK0
   237  000060                     __pdataBANK0:
   238                           	callstack 0
   239  000060                     _colors:
   240                           	callstack 0
   241  000060                     	ds	78
   242                           
   243                           	psect	cstackCOMRAM
   244  000018                     __pcstackCOMRAM:
   245                           	callstack 0
   246  000018                     ??_INTERRUPT_Manager:
   247  000018                     
   248                           ; 1 bytes @ 0x0
   249  000018                     	ds	2
   250  00001A                     ??_ENCODER_SwitchRead:
   251  00001A                     ?___wmul:
   252                           	callstack 0
   253  00001A                     ___wmul@multiplier:
   254                           	callstack 0
   255                           
   256                           ; 2 bytes @ 0x2
   257  00001A                     	ds	2
   258  00001C                     ___wmul@multiplicand:
   259                           	callstack 0
   260                           
   261                           ; 2 bytes @ 0x4
   262  00001C                     	ds	2
   263  00001E                     ___wmul@product:
   264                           	callstack 0
   265                           
   266                           ; 2 bytes @ 0x6
   267  00001E                     	ds	2
   268  000020                     PWM_SetDutty@colorGreen:
   269                           	callstack 0
   270                           
   271                           ; 1 bytes @ 0x8
   272  000020                     	ds	1
   273  000021                     PWM_SetDutty@colorBlue:
   274                           	callstack 0
   275                           
   276                           ; 1 bytes @ 0x9
   277  000021                     	ds	1
   278  000022                     PWM_SetDutty@colorRed:
   279                           	callstack 0
   280                           
   281                           ; 1 bytes @ 0xA
   282  000022                     	ds	1
   283  000023                     IO_ENCODERSetColors@currentLedNumber:
   284                           	callstack 0
   285                           
   286                           ; 2 bytes @ 0xB
   287  000023                     	ds	2
   288  000025                     
   289                           ; 1 bytes @ 0xD
   290 ;;
   291 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   292 ;;
   293 ;; *************** function _main *****************
   294 ;; Defined at:
   295 ;;		line 26 in file "main.c"
   296 ;; Parameters:    Size  Location     Type
   297 ;;		None
   298 ;; Auto vars:     Size  Location     Type
   299 ;;		None
   300 ;; Return value:  Size  Location     Type
   301 ;;                  1    wreg      void 
   302 ;; Registers used:
   303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   304 ;; Tracked objects:
   305 ;;		On entry : 0/0
   306 ;;		On exit  : 0/0
   307 ;;		Unchanged: 0/0
   308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   309 ;;      Params:         0       0       0       0       0       0       0
   310 ;;      Locals:         0       0       0       0       0       0       0
   311 ;;      Temps:          0       0       0       0       0       0       0
   312 ;;      Totals:         0       0       0       0       0       0       0
   313 ;;Total ram usage:        0 bytes
   314 ;; Hardware stack levels required when called:    3
   315 ;; This function calls:
   316 ;;		_ENCODER_SwitchRead
   317 ;;		_IO_ENCODERSetColors
   318 ;;		_MCU_Init
   319 ;; This function is called by:
   320 ;;		Startup code after reset
   321 ;; This function uses a non-reentrant model
   322 ;;
   323                           
   324                           	psect	text0
   325  000396                     __ptext0:
   326                           	callstack 0
   327  000396                     _main:
   328                           	callstack 28
   329  000396                     
   330                           ;main.c: 27:     MCU_Init();
   331  000396  ECCD  F000         	call	_MCU_Init	;wreg free
   332  00039A                     l1080:
   333                           
   334                           ;main.c: 30:         ENCODER_SwitchRead();
   335  00039A  EC92  F001         	call	_ENCODER_SwitchRead	;wreg free
   336  00039E                     
   337                           ;main.c: 31:         IO_ENCODERSetColors();
   338  00039E  EC12  F001         	call	_IO_ENCODERSetColors	;wreg free
   339  0003A2  EFCD  F001         	goto	l1080
   340  0003A6  EFCB  F000         	goto	start
   341  0003AA                     __end_of_main:
   342                           	callstack 0
   343                           
   344 ;; *************** function _MCU_Init *****************
   345 ;; Defined at:
   346 ;;		line 10 in file "mcu.c"
   347 ;; Parameters:    Size  Location     Type
   348 ;;		None
   349 ;; Auto vars:     Size  Location     Type
   350 ;;		None
   351 ;; Return value:  Size  Location     Type
   352 ;;                  1    wreg      void 
   353 ;; Registers used:
   354 ;;		wreg, status,2, cstack
   355 ;; Tracked objects:
   356 ;;		On entry : 0/0
   357 ;;		On exit  : 0/0
   358 ;;		Unchanged: 0/0
   359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   360 ;;      Params:         0       0       0       0       0       0       0
   361 ;;      Locals:         0       0       0       0       0       0       0
   362 ;;      Temps:          0       0       0       0       0       0       0
   363 ;;      Totals:         0       0       0       0       0       0       0
   364 ;;Total ram usage:        0 bytes
   365 ;; Hardware stack levels used:    1
   366 ;; Hardware stack levels required when called:    2
   367 ;; This function calls:
   368 ;;		_ENCODER_Init
   369 ;;		_INTERRUPT_Enable
   370 ;;		_PWM_Init
   371 ;; This function is called by:
   372 ;;		_main
   373 ;; This function uses a non-reentrant model
   374 ;;
   375                           
   376                           	psect	text1
   377  00019A                     __ptext1:
   378                           	callstack 0
   379  00019A                     _MCU_Init:
   380                           	callstack 28
   381  00019A                     
   382                           ;mcu.c: 12:     ANSELA = 0;
   383  00019A  0E00               	movlw	0
   384  00019C  010F               	movlb	15	; () banked
   385  00019E  6F38               	movwf	56,b	;volatile
   386                           
   387                           ;mcu.c: 13:     ANSELB = 0;
   388  0001A0  0E00               	movlw	0
   389  0001A2  6F39               	movwf	57,b	;volatile
   390                           
   391                           ;mcu.c: 14:     ANSELC = 0;
   392  0001A4  0E00               	movlw	0
   393  0001A6  6F3A               	movwf	58,b	;volatile
   394                           
   395                           ;mcu.c: 17:     OSCCONbits.IRCF=0b111;
   396  0001A8  0E70               	movlw	112
   397  0001AA  12D3               	iorwf	211,f,c	;volatile
   398                           
   399                           ;mcu.c: 20:     TRISA = 0b00000000;
   400  0001AC  0E00               	movlw	0
   401  0001AE  6E92               	movwf	146,c	;volatile
   402                           
   403                           ;mcu.c: 21:     TRISB = 0b00110000;
   404  0001B0  0E30               	movlw	48
   405  0001B2  6E93               	movwf	147,c	;volatile
   406                           
   407                           ;mcu.c: 22:     TRISC = 0b00001000;
   408  0001B4  0E08               	movlw	8
   409  0001B6  6E94               	movwf	148,c	;volatile
   410                           
   411                           ;mcu.c: 25:     PORTA = 0x00;
   412  0001B8  0E00               	movlw	0
   413  0001BA  6E80               	movwf	128,c	;volatile
   414                           
   415                           ;mcu.c: 26:     PORTB = 0x00;
   416  0001BC  0E00               	movlw	0
   417  0001BE  6E81               	movwf	129,c	;volatile
   418                           
   419                           ;mcu.c: 27:     PORTC = 0x00;
   420  0001C0  0E00               	movlw	0
   421  0001C2  6E82               	movwf	130,c	;volatile
   422                           
   423                           ;mcu.c: 28:     LATA = 0x00;
   424  0001C4  0E00               	movlw	0
   425  0001C6  6E89               	movwf	137,c	;volatile
   426                           
   427                           ;mcu.c: 29:     LATB = 0x00;
   428  0001C8  0E00               	movlw	0
   429  0001CA  6E8A               	movwf	138,c	;volatile
   430                           
   431                           ;mcu.c: 30:     LATC = 0x00;
   432  0001CC  0E00               	movlw	0
   433  0001CE  6E8B               	movwf	139,c	;volatile
   434  0001D0                     
   435                           ; BSR set to: 15
   436                           ;mcu.c: 32:     LATCbits.LATC2 = 0;
   437  0001D0  948B               	bcf	139,2,c	;volatile
   438  0001D2                     
   439                           ; BSR set to: 15
   440                           ;mcu.c: 33:     LATCbits.LATC1 = 0;
   441  0001D2  928B               	bcf	139,1,c	;volatile
   442  0001D4                     
   443                           ; BSR set to: 15
   444                           ;mcu.c: 34:     LATCbits.LATC0 = 0;
   445  0001D4  908B               	bcf	139,0,c	;volatile
   446  0001D6                     
   447                           ; BSR set to: 15
   448                           ;mcu.c: 35:     LATAbits.LATA6 = 0;
   449  0001D6  9C89               	bcf	137,6,c	;volatile
   450                           
   451                           ;mcu.c: 37:     PWMDutty[2] = 0;
   452  0001D8  0E00               	movlw	0
   453  0001DA  6E10               	movwf	(_PWMDutty+2)^0,c
   454                           
   455                           ;mcu.c: 38:     PWMDutty[1] = 0;
   456  0001DC  0E00               	movlw	0
   457  0001DE  6E0F               	movwf	(_PWMDutty+1)^0,c
   458                           
   459                           ;mcu.c: 39:     PWMDutty[0] = 0;
   460  0001E0  0E00               	movlw	0
   461  0001E2  6E0E               	movwf	_PWMDutty^0,c
   462                           
   463                           ;mcu.c: 42:     rotary.encoderPosition = 0;
   464  0001E4  0E00               	movlw	0
   465  0001E6  6E02               	movwf	(_rotary+1)^0,c
   466  0001E8  0E00               	movlw	0
   467  0001EA  6E01               	movwf	_rotary^0,c
   468                           
   469                           ;mcu.c: 43:     rotary.encoderState = 0;
   470  0001EC  0E00               	movlw	0
   471  0001EE  6E05               	movwf	(_rotary+4)^0,c
   472  0001F0                     
   473                           ; BSR set to: 15
   474                           ;mcu.c: 44:     rotary.encoderPreviousState = 0xFF;
   475  0001F0  6806               	setf	(_rotary+5)^0,c
   476                           
   477                           ;mcu.c: 45:     rotary.encoderDirection = 0;
   478  0001F2  0E00               	movlw	0
   479  0001F4  6E04               	movwf	(_rotary+3)^0,c
   480  0001F6  0E00               	movlw	0
   481  0001F8  6E03               	movwf	(_rotary+2)^0,c
   482                           
   483                           ;mcu.c: 49:     rotary.buttonState = 0;
   484  0001FA  0E00               	movlw	0
   485  0001FC  6E07               	movwf	(_rotary+6)^0,c
   486                           
   487                           ;mcu.c: 50:     rotary.buttonTicks = 0;
   488  0001FE  0E00               	movlw	0
   489  000200  6E0A               	movwf	(_rotary+9)^0,c
   490  000202  0E00               	movlw	0
   491  000204  6E09               	movwf	(_rotary+8)^0,c
   492                           
   493                           ;mcu.c: 51:     rotary.currentButtonState = 0;
   494  000206  0E00               	movlw	0
   495  000208  6E0C               	movwf	(_rotary+11)^0,c
   496  00020A  0E00               	movlw	0
   497  00020C  6E0B               	movwf	(_rotary+10)^0,c
   498                           
   499                           ;mcu.c: 52:     rotary.lastButtonState = 0;
   500  00020E  0E00               	movlw	0
   501  000210  6E0D               	movwf	(_rotary+12)^0,c
   502                           
   503                           ;mcu.c: 53:     rotary.buttonMode = 0;
   504  000212  0E00               	movlw	0
   505  000214  6E08               	movwf	(_rotary+7)^0,c
   506  000216                     
   507                           ; BSR set to: 15
   508                           ;mcu.c: 56:     PWM_Init();
   509  000216  ECBC  F001         	call	_PWM_Init	;wreg free
   510                           
   511                           ;mcu.c: 57:     ENCODER_Init();
   512  00021A  ECDD  F001         	call	_ENCODER_Init	;wreg free
   513                           
   514                           ;mcu.c: 58:     INTERRUPT_Enable();
   515  00021E  ECE4  F001         	call	_INTERRUPT_Enable	;wreg free
   516  000222  0012               	return		;funcret
   517  000224                     __end_of_MCU_Init:
   518                           	callstack 0
   519                           
   520 ;; *************** function _PWM_Init *****************
   521 ;; Defined at:
   522 ;;		line 48 in file "io_service.c"
   523 ;; Parameters:    Size  Location     Type
   524 ;;		None
   525 ;; Auto vars:     Size  Location     Type
   526 ;;		None
   527 ;; Return value:  Size  Location     Type
   528 ;;                  1    wreg      void 
   529 ;; Registers used:
   530 ;;		wreg, status,2
   531 ;; Tracked objects:
   532 ;;		On entry : 0/0
   533 ;;		On exit  : 0/0
   534 ;;		Unchanged: 0/0
   535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   536 ;;      Params:         0       0       0       0       0       0       0
   537 ;;      Locals:         0       0       0       0       0       0       0
   538 ;;      Temps:          0       0       0       0       0       0       0
   539 ;;      Totals:         0       0       0       0       0       0       0
   540 ;;Total ram usage:        0 bytes
   541 ;; Hardware stack levels used:    1
   542 ;; Hardware stack levels required when called:    1
   543 ;; This function calls:
   544 ;;		Nothing
   545 ;; This function is called by:
   546 ;;		_MCU_Init
   547 ;; This function uses a non-reentrant model
   548 ;;
   549                           
   550                           	psect	text2
   551  000378                     __ptext2:
   552                           	callstack 0
   553  000378                     _PWM_Init:
   554                           	callstack 28
   555  000378                     
   556                           ;io_service.c: 50:     T0CONbits.TMR0ON = 1;
   557  000378  8ED5               	bsf	213,7,c	;volatile
   558                           
   559                           ;io_service.c: 51:     T0CONbits.T08BIT = 1;
   560  00037A  8CD5               	bsf	213,6,c	;volatile
   561                           
   562                           ;io_service.c: 52:     T0CONbits.T0CS = 0;
   563  00037C  9AD5               	bcf	213,5,c	;volatile
   564                           
   565                           ;io_service.c: 53:     T0CONbits.T0SE = 0;
   566  00037E  98D5               	bcf	213,4,c	;volatile
   567                           
   568                           ;io_service.c: 54:     T0CONbits.PSA = 0;
   569  000380  96D5               	bcf	213,3,c	;volatile
   570  000382                     
   571                           ;io_service.c: 55:     T0CONbits.T0PS = 0b000;
   572  000382  0EF8               	movlw	-8
   573  000384  16D5               	andwf	213,f,c	;volatile
   574                           
   575                           ;io_service.c: 56:     TMR0H = 0x00;
   576  000386  0E00               	movlw	0
   577  000388  6ED7               	movwf	215,c	;volatile
   578                           
   579                           ;io_service.c: 57:     TMR0L = 0xB2;
   580  00038A  0EB2               	movlw	178
   581  00038C  6ED6               	movwf	214,c	;volatile
   582  00038E                     
   583                           ;io_service.c: 58:     INTCONbits.TMR0IF = 0;
   584  00038E  94F2               	bcf	242,2,c	;volatile
   585  000390                     
   586                           ;io_service.c: 59:     INTCONbits.TMR0IE = 1;
   587  000390  8AF2               	bsf	242,5,c	;volatile
   588  000392                     
   589                           ;io_service.c: 60:     INTCON2bits.TMR0IP = 1;
   590  000392  84F1               	bsf	241,2,c	;volatile
   591  000394  0012               	return		;funcret
   592  000396                     __end_of_PWM_Init:
   593                           	callstack 0
   594                           
   595 ;; *************** function _INTERRUPT_Enable *****************
   596 ;; Defined at:
   597 ;;		line 12 in file "isr.c"
   598 ;; Parameters:    Size  Location     Type
   599 ;;		None
   600 ;; Auto vars:     Size  Location     Type
   601 ;;		None
   602 ;; Return value:  Size  Location     Type
   603 ;;                  1    wreg      void 
   604 ;; Registers used:
   605 ;;		None
   606 ;; Tracked objects:
   607 ;;		On entry : 0/0
   608 ;;		On exit  : 0/0
   609 ;;		Unchanged: 0/0
   610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   611 ;;      Params:         0       0       0       0       0       0       0
   612 ;;      Locals:         0       0       0       0       0       0       0
   613 ;;      Temps:          0       0       0       0       0       0       0
   614 ;;      Totals:         0       0       0       0       0       0       0
   615 ;;Total ram usage:        0 bytes
   616 ;; Hardware stack levels used:    1
   617 ;; Hardware stack levels required when called:    1
   618 ;; This function calls:
   619 ;;		Nothing
   620 ;; This function is called by:
   621 ;;		_MCU_Init
   622 ;; This function uses a non-reentrant model
   623 ;;
   624                           
   625                           	psect	text3
   626  0003C8                     __ptext3:
   627                           	callstack 0
   628  0003C8                     _INTERRUPT_Enable:
   629                           	callstack 28
   630  0003C8                     
   631                           ;isr.c: 13:     RCONbits.IPEN = 1;
   632  0003C8  8ED0               	bsf	208,7,c	;volatile
   633                           
   634                           ;isr.c: 14:     INTCONbits.GIEH = 1;
   635  0003CA  8EF2               	bsf	242,7,c	;volatile
   636                           
   637                           ;isr.c: 15:     INTCONbits.GIEL = 1;
   638  0003CC  8CF2               	bsf	242,6,c	;volatile
   639  0003CE  0012               	return		;funcret
   640  0003D0                     __end_of_INTERRUPT_Enable:
   641                           	callstack 0
   642                           
   643 ;; *************** function _ENCODER_Init *****************
   644 ;; Defined at:
   645 ;;		line 69 in file "io_service.c"
   646 ;; Parameters:    Size  Location     Type
   647 ;;		None
   648 ;; Auto vars:     Size  Location     Type
   649 ;;		None
   650 ;; Return value:  Size  Location     Type
   651 ;;                  1    wreg      void 
   652 ;; Registers used:
   653 ;;		None
   654 ;; Tracked objects:
   655 ;;		On entry : 0/0
   656 ;;		On exit  : 0/0
   657 ;;		Unchanged: 0/0
   658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   659 ;;      Params:         0       0       0       0       0       0       0
   660 ;;      Locals:         0       0       0       0       0       0       0
   661 ;;      Temps:          0       0       0       0       0       0       0
   662 ;;      Totals:         0       0       0       0       0       0       0
   663 ;;Total ram usage:        0 bytes
   664 ;; Hardware stack levels used:    1
   665 ;; Hardware stack levels required when called:    1
   666 ;; This function calls:
   667 ;;		Nothing
   668 ;; This function is called by:
   669 ;;		_MCU_Init
   670 ;; This function uses a non-reentrant model
   671 ;;
   672                           
   673                           	psect	text4
   674  0003BA                     __ptext4:
   675                           	callstack 0
   676  0003BA                     _ENCODER_Init:
   677                           	callstack 28
   678  0003BA                     
   679                           ;io_service.c: 71:     INTCON2bits.RBPU = 1;
   680  0003BA  8EF1               	bsf	241,7,c	;volatile
   681                           
   682                           ;io_service.c: 74:     INTCON2bits.RBIP = 1;
   683  0003BC  80F1               	bsf	241,0,c	;volatile
   684                           
   685                           ;io_service.c: 75:     INTCONbits.RBIF = 0;
   686  0003BE  90F2               	bcf	242,0,c	;volatile
   687                           
   688                           ;io_service.c: 76:     INTCONbits.RBIE = 1;
   689  0003C0  86F2               	bsf	242,3,c	;volatile
   690                           
   691                           ;io_service.c: 77:     IOCBbits.IOCB4 = 1;
   692  0003C2  8862               	bsf	98,4,c	;volatile
   693                           
   694                           ;io_service.c: 78:     IOCBbits.IOCB5 = 1;
   695  0003C4  8A62               	bsf	98,5,c	;volatile
   696  0003C6  0012               	return		;funcret
   697  0003C8                     __end_of_ENCODER_Init:
   698                           	callstack 0
   699                           
   700 ;; *************** function _IO_ENCODERSetColors *****************
   701 ;; Defined at:
   702 ;;		line 91 in file "io_service.c"
   703 ;; Parameters:    Size  Location     Type
   704 ;;		None
   705 ;; Auto vars:     Size  Location     Type
   706 ;;  currentLedNu    2   11[COMRAM] unsigned short 
   707 ;; Return value:  Size  Location     Type
   708 ;;                  1    wreg      void 
   709 ;; Registers used:
   710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   711 ;; Tracked objects:
   712 ;;		On entry : 0/0
   713 ;;		On exit  : 0/0
   714 ;;		Unchanged: 0/0
   715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   716 ;;      Params:         0       0       0       0       0       0       0
   717 ;;      Locals:         2       0       0       0       0       0       0
   718 ;;      Temps:          0       0       0       0       0       0       0
   719 ;;      Totals:         2       0       0       0       0       0       0
   720 ;;Total ram usage:        2 bytes
   721 ;; Hardware stack levels used:    1
   722 ;; Hardware stack levels required when called:    2
   723 ;; This function calls:
   724 ;;		_PWM_SetDutty
   725 ;;		___wmul
   726 ;; This function is called by:
   727 ;;		_main
   728 ;; This function uses a non-reentrant model
   729 ;;
   730                           
   731                           	psect	text5
   732  000224                     __ptext5:
   733                           	callstack 0
   734  000224                     _IO_ENCODERSetColors:
   735                           	callstack 28
   736  000224                     
   737                           ;io_service.c: 92:     uint16_t currentLedNumber = rotary.encoderPosition;
   738  000224  C001  F023         	movff	_rotary,IO_ENCODERSetColors@currentLedNumber
   739  000228  C002  F024         	movff	_rotary+1,IO_ENCODERSetColors@currentLedNumber+1
   740  00022C                     
   741                           ;io_service.c: 93:     PWM_SetDutty(colors[currentLedNumber][2], colors[currentLedNumber
      +                          ][1], colors[currentLedNumber][0]);
   742  00022C  C023  F01A         	movff	IO_ENCODERSetColors@currentLedNumber,___wmul@multiplier
   743  000230  C024  F01B         	movff	IO_ENCODERSetColors@currentLedNumber+1,___wmul@multiplier+1
   744  000234  0E00               	movlw	0
   745  000236  6E1D               	movwf	(___wmul@multiplicand+1)^0,c
   746  000238  0E03               	movlw	3
   747  00023A  6E1C               	movwf	___wmul@multiplicand^0,c
   748  00023C  ECA9  F001         	call	___wmul	;wreg free
   749  000240  0E61               	movlw	low (_colors+1)
   750  000242  241A               	addwf	?___wmul^0,w,c
   751  000244  6ED9               	movwf	fsr2l,c
   752  000246  0E00               	movlw	high (_colors+1)
   753  000248  201B               	addwfc	(?___wmul+1)^0,w,c
   754  00024A  6EDA               	movwf	fsr2h,c
   755  00024C  50DF               	movf	indf2,w,c
   756  00024E  6E20               	movwf	PWM_SetDutty@colorGreen^0,c
   757  000250  C023  F01A         	movff	IO_ENCODERSetColors@currentLedNumber,___wmul@multiplier
   758  000254  C024  F01B         	movff	IO_ENCODERSetColors@currentLedNumber+1,___wmul@multiplier+1
   759  000258  0E00               	movlw	0
   760  00025A  6E1D               	movwf	(___wmul@multiplicand+1)^0,c
   761  00025C  0E03               	movlw	3
   762  00025E  6E1C               	movwf	___wmul@multiplicand^0,c
   763  000260  ECA9  F001         	call	___wmul	;wreg free
   764  000264  0E60               	movlw	low _colors
   765  000266  241A               	addwf	?___wmul^0,w,c
   766  000268  6ED9               	movwf	fsr2l,c
   767  00026A  0E00               	movlw	high _colors
   768  00026C  201B               	addwfc	(?___wmul+1)^0,w,c
   769  00026E  6EDA               	movwf	fsr2h,c
   770  000270  50DF               	movf	indf2,w,c
   771  000272  6E21               	movwf	PWM_SetDutty@colorBlue^0,c
   772  000274  C023  F01A         	movff	IO_ENCODERSetColors@currentLedNumber,___wmul@multiplier
   773  000278  C024  F01B         	movff	IO_ENCODERSetColors@currentLedNumber+1,___wmul@multiplier+1
   774  00027C  0E00               	movlw	0
   775  00027E  6E1D               	movwf	(___wmul@multiplicand+1)^0,c
   776  000280  0E03               	movlw	3
   777  000282  6E1C               	movwf	___wmul@multiplicand^0,c
   778  000284  ECA9  F001         	call	___wmul	;wreg free
   779  000288  0E62               	movlw	low (_colors+2)
   780  00028A  241A               	addwf	?___wmul^0,w,c
   781  00028C  6ED9               	movwf	fsr2l,c
   782  00028E  0E00               	movlw	high (_colors+2)
   783  000290  201B               	addwfc	(?___wmul+1)^0,w,c
   784  000292  6EDA               	movwf	fsr2h,c
   785  000294  50DF               	movf	indf2,w,c
   786  000296  ECD5  F001         	call	_PWM_SetDutty
   787  00029A  0012               	return		;funcret
   788  00029C                     __end_of_IO_ENCODERSetColors:
   789                           	callstack 0
   790                           
   791 ;; *************** function ___wmul *****************
   792 ;; Defined at:
   793 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul16.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;  multiplier      2    2[COMRAM] unsigned int 
   796 ;;  multiplicand    2    4[COMRAM] unsigned int 
   797 ;; Auto vars:     Size  Location     Type
   798 ;;  product         2    6[COMRAM] unsigned int 
   799 ;; Return value:  Size  Location     Type
   800 ;;                  2    2[COMRAM] unsigned int 
   801 ;; Registers used:
   802 ;;		wreg, status,2, status,0, prodl, prodh
   803 ;; Tracked objects:
   804 ;;		On entry : 0/0
   805 ;;		On exit  : 0/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   808 ;;      Params:         4       0       0       0       0       0       0
   809 ;;      Locals:         2       0       0       0       0       0       0
   810 ;;      Temps:          0       0       0       0       0       0       0
   811 ;;      Totals:         6       0       0       0       0       0       0
   812 ;;Total ram usage:        6 bytes
   813 ;; Hardware stack levels used:    1
   814 ;; Hardware stack levels required when called:    1
   815 ;; This function calls:
   816 ;;		Nothing
   817 ;; This function is called by:
   818 ;;		_IO_ENCODERSetColors
   819 ;; This function uses a non-reentrant model
   820 ;;
   821                           
   822                           	psect	text6
   823  000352                     __ptext6:
   824                           	callstack 0
   825  000352                     ___wmul:
   826                           	callstack 28
   827  000352  501A               	movf	___wmul@multiplier^0,w,c
   828  000354  021C               	mulwf	___wmul@multiplicand^0,c
   829  000356  CFF3 F01E          	movff	prodl,___wmul@product
   830  00035A  CFF4 F01F          	movff	prodh,___wmul@product+1
   831  00035E  501A               	movf	___wmul@multiplier^0,w,c
   832  000360  021D               	mulwf	(___wmul@multiplicand+1)^0,c
   833  000362  50F3               	movf	243,w,c
   834  000364  261F               	addwf	(___wmul@product+1)^0,f,c
   835  000366  501B               	movf	(___wmul@multiplier+1)^0,w,c
   836  000368  021C               	mulwf	___wmul@multiplicand^0,c
   837  00036A  50F3               	movf	243,w,c
   838  00036C  261F               	addwf	(___wmul@product+1)^0,f,c
   839  00036E  C01E  F01A         	movff	___wmul@product,?___wmul
   840  000372  C01F  F01B         	movff	___wmul@product+1,?___wmul+1
   841  000376  0012               	return		;funcret
   842  000378                     __end_of___wmul:
   843                           	callstack 0
   844                           
   845 ;; *************** function _PWM_SetDutty *****************
   846 ;; Defined at:
   847 ;;		line 63 in file "io_service.c"
   848 ;; Parameters:    Size  Location     Type
   849 ;;  colorRed        1    wreg     unsigned char 
   850 ;;  colorGreen      1    8[COMRAM] unsigned char 
   851 ;;  colorBlue       1    9[COMRAM] unsigned char 
   852 ;; Auto vars:     Size  Location     Type
   853 ;;  colorRed        1   10[COMRAM] unsigned char 
   854 ;; Return value:  Size  Location     Type
   855 ;;                  1    wreg      void 
   856 ;; Registers used:
   857 ;;		wreg
   858 ;; Tracked objects:
   859 ;;		On entry : 0/0
   860 ;;		On exit  : 0/0
   861 ;;		Unchanged: 0/0
   862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   863 ;;      Params:         2       0       0       0       0       0       0
   864 ;;      Locals:         1       0       0       0       0       0       0
   865 ;;      Temps:          0       0       0       0       0       0       0
   866 ;;      Totals:         3       0       0       0       0       0       0
   867 ;;Total ram usage:        3 bytes
   868 ;; Hardware stack levels used:    1
   869 ;; Hardware stack levels required when called:    1
   870 ;; This function calls:
   871 ;;		Nothing
   872 ;; This function is called by:
   873 ;;		_IO_ENCODERSetColors
   874 ;;		_LEDRGB_ColorDemo
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878                           	psect	text7
   879  0003AA                     __ptext7:
   880                           	callstack 0
   881  0003AA                     _PWM_SetDutty:
   882                           	callstack 28
   883                           
   884                           ;incstack = 0
   885                           ;PWM_SetDutty@colorRed stored from wreg
   886  0003AA  6E22               	movwf	PWM_SetDutty@colorRed^0,c
   887  0003AC                     
   888                           ;io_service.c: 64:     PWMDutty[2] = colorRed;
   889  0003AC  C022  F010         	movff	PWM_SetDutty@colorRed,_PWMDutty+2
   890  0003B0                     
   891                           ;io_service.c: 65:     PWMDutty[1] = colorGreen;
   892  0003B0  C020  F00F         	movff	PWM_SetDutty@colorGreen,_PWMDutty+1
   893  0003B4                     
   894                           ;io_service.c: 66:     PWMDutty[0] = colorBlue;
   895  0003B4  C021  F00E         	movff	PWM_SetDutty@colorBlue,_PWMDutty
   896  0003B8  0012               	return		;funcret
   897  0003BA                     __end_of_PWM_SetDutty:
   898                           	callstack 0
   899                           
   900 ;; *************** function _ENCODER_SwitchRead *****************
   901 ;; Defined at:
   902 ;;		line 81 in file "io_service.c"
   903 ;; Parameters:    Size  Location     Type
   904 ;;		None
   905 ;; Auto vars:     Size  Location     Type
   906 ;;		None
   907 ;; Return value:  Size  Location     Type
   908 ;;                  1    wreg      void 
   909 ;; Registers used:
   910 ;;		wreg, status,2, status,0
   911 ;; Tracked objects:
   912 ;;		On entry : 0/0
   913 ;;		On exit  : 0/0
   914 ;;		Unchanged: 0/0
   915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   916 ;;      Params:         0       0       0       0       0       0       0
   917 ;;      Locals:         0       0       0       0       0       0       0
   918 ;;      Temps:          2       0       0       0       0       0       0
   919 ;;      Totals:         2       0       0       0       0       0       0
   920 ;;Total ram usage:        2 bytes
   921 ;; Hardware stack levels used:    1
   922 ;; Hardware stack levels required when called:    1
   923 ;; This function calls:
   924 ;;		Nothing
   925 ;; This function is called by:
   926 ;;		_main
   927 ;; This function uses a non-reentrant model
   928 ;;
   929                           
   930                           	psect	text8
   931  000324                     __ptext8:
   932                           	callstack 0
   933  000324                     _ENCODER_SwitchRead:
   934                           	callstack 29
   935  000324                     
   936                           ;io_service.c: 82:     if(PORTCbits.RC3 == 0){
   937  000324  B682               	btfsc	130,3,c	;volatile
   938  000326  EF97  F001         	goto	u11
   939  00032A  EF99  F001         	goto	u10
   940  00032E                     u11:
   941  00032E  EFA8  F001         	goto	l45
   942  000332                     u10:
   943  000332                     
   944                           ;io_service.c: 83:         LATCbits.LATC2 ^= 1;
   945  000332  748B               	btg	139,2,c	;volatile
   946                           
   947                           ;io_service.c: 84:         LATCbits.LATC1 ^= 1;
   948  000334  728B               	btg	139,1,c	;volatile
   949                           
   950                           ;io_service.c: 85:         LATCbits.LATC0 ^= 1;
   951  000336  708B               	btg	139,0,c	;volatile
   952                           
   953                           ;io_service.c: 86:         LATAbits.LATA6 ^= 1;
   954  000338  7C89               	btg	137,6,c	;volatile
   955  00033A                     
   956                           ;io_service.c: 87:         _delay((unsigned long)((500)*(16000000/4000.0)));
   957  00033A  0E0B               	movlw	11
   958  00033C  6E1B               	movwf	(??_ENCODER_SwitchRead+1)^0,c
   959  00033E  0E26               	movlw	38
   960  000340  6E1A               	movwf	??_ENCODER_SwitchRead^0,c
   961  000342  0E5E               	movlw	94
   962  000344                     u277:
   963  000344  2EE8               	decfsz	wreg,f,c
   964  000346  D7FE               	bra	u277
   965  000348  2E1A               	decfsz	??_ENCODER_SwitchRead^0,f,c
   966  00034A  D7FC               	bra	u277
   967  00034C  2E1B               	decfsz	(??_ENCODER_SwitchRead+1)^0,f,c
   968  00034E  D7FA               	bra	u277
   969  000350                     l45:
   970  000350  0012               	return		;funcret
   971  000352                     __end_of_ENCODER_SwitchRead:
   972                           	callstack 0
   973                           
   974 ;; *************** function _INTERRUPT_Manager *****************
   975 ;; Defined at:
   976 ;;		line 26 in file "isr.c"
   977 ;; Parameters:    Size  Location     Type
   978 ;;		None
   979 ;; Auto vars:     Size  Location     Type
   980 ;;		None
   981 ;; Return value:  Size  Location     Type
   982 ;;                  1    wreg      void 
   983 ;; Registers used:
   984 ;;		wreg, status,2, status,0
   985 ;; Tracked objects:
   986 ;;		On entry : 0/0
   987 ;;		On exit  : 0/0
   988 ;;		Unchanged: 0/0
   989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   990 ;;      Params:         0       0       0       0       0       0       0
   991 ;;      Locals:         0       0       0       0       0       0       0
   992 ;;      Temps:          2       0       0       0       0       0       0
   993 ;;      Totals:         2       0       0       0       0       0       0
   994 ;;Total ram usage:        2 bytes
   995 ;; Hardware stack levels used:    1
   996 ;; This function calls:
   997 ;;		Nothing
   998 ;; This function is called by:
   999 ;;		Interrupt level 2
  1000 ;; This function uses a non-reentrant model
  1001 ;;
  1002                           
  1003                           	psect	intcode
  1004  000008                     __pintcode:
  1005                           	callstack 0
  1006  000008                     _INTERRUPT_Manager:
  1007                           	callstack 28
  1008                           
  1009                           ;incstack = 0
  1010  000008  8225               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1011  00000A                     
  1012                           ;isr.c: 27:     if(INTCONbits.TMR0IE && INTCONbits.TMR0IF){
  1013  00000A  AAF2               	btfss	242,5,c	;volatile
  1014  00000C  EF0A  F000         	goto	i2u6_41
  1015  000010  EF0C  F000         	goto	i2u6_40
  1016  000014                     i2u6_41:
  1017  000014  EF54  F000         	goto	i2l972
  1018  000018                     i2u6_40:
  1019  000018  A4F2               	btfss	242,2,c	;volatile
  1020  00001A  EF11  F000         	goto	i2u7_41
  1021  00001E  EF13  F000         	goto	i2u7_40
  1022  000022                     i2u7_41:
  1023  000022  EF54  F000         	goto	i2l972
  1024  000026                     i2u7_40:
  1025  000026                     
  1026                           ;isr.c: 28:         if (Ticks == 256)
  1027  000026  0413               	decf	(_Ticks+1)^0,w,c
  1028  000028  1012               	iorwf	_Ticks^0,w,c
  1029  00002A  A4D8               	btfss	status,2,c
  1030  00002C  EF1A  F000         	goto	i2u8_41
  1031  000030  EF1C  F000         	goto	i2u8_40
  1032  000034                     i2u8_41:
  1033  000034  EF20  F000         	goto	i2l954
  1034  000038                     i2u8_40:
  1035  000038                     
  1036                           ;isr.c: 29:             Ticks = 0;
  1037  000038  0E00               	movlw	0
  1038  00003A  6E13               	movwf	(_Ticks+1)^0,c
  1039  00003C  0E00               	movlw	0
  1040  00003E  6E12               	movwf	_Ticks^0,c
  1041  000040                     i2l954:
  1042                           
  1043                           ;isr.c: 30:         ++Ticks;
  1044  000040  4A12               	infsnz	_Ticks^0,f,c
  1045  000042  2A13               	incf	(_Ticks+1)^0,f,c
  1046  000044                     
  1047                           ;isr.c: 32:         if (Ticks < PWMDutty[2])
  1048  000044  5010               	movf	(_PWMDutty+2)^0,w,c
  1049  000046  5C12               	subwf	_Ticks^0,w,c
  1050  000048  0E00               	movlw	0
  1051  00004A  5813               	subwfb	(_Ticks+1)^0,w,c
  1052  00004C  B0D8               	btfsc	status,0,c
  1053  00004E  EF2B  F000         	goto	i2u9_41
  1054  000052  EF2D  F000         	goto	i2u9_40
  1055  000056                     i2u9_41:
  1056  000056  EF30  F000         	goto	i2l94
  1057  00005A                     i2u9_40:
  1058  00005A                     
  1059                           ;isr.c: 33:             LATAbits.LATA5 = 1;
  1060  00005A  8A89               	bsf	137,5,c	;volatile
  1061  00005C  EF31  F000         	goto	i2l960
  1062  000060                     i2l94:
  1063  000060  9A89               	bcf	137,5,c	;volatile
  1064  000062                     i2l960:
  1065                           
  1066                           ;isr.c: 36:         if (Ticks < PWMDutty[1])
  1067  000062  500F               	movf	(_PWMDutty+1)^0,w,c
  1068  000064  5C12               	subwf	_Ticks^0,w,c
  1069  000066  0E00               	movlw	0
  1070  000068  5813               	subwfb	(_Ticks+1)^0,w,c
  1071  00006A  B0D8               	btfsc	status,0,c
  1072  00006C  EF3A  F000         	goto	i2u10_41
  1073  000070  EF3C  F000         	goto	i2u10_40
  1074  000074                     i2u10_41:
  1075  000074  EF3F  F000         	goto	i2l96
  1076  000078                     i2u10_40:
  1077  000078                     
  1078                           ;isr.c: 37:             LATAbits.LATA7 = 1;
  1079  000078  8E89               	bsf	137,7,c	;volatile
  1080  00007A  EF40  F000         	goto	i2l964
  1081  00007E                     i2l96:
  1082  00007E  9E89               	bcf	137,7,c	;volatile
  1083  000080                     i2l964:
  1084                           
  1085                           ;isr.c: 40:         if (Ticks < PWMDutty[0])
  1086  000080  500E               	movf	_PWMDutty^0,w,c
  1087  000082  5C12               	subwf	_Ticks^0,w,c
  1088  000084  0E00               	movlw	0
  1089  000086  5813               	subwfb	(_Ticks+1)^0,w,c
  1090  000088  B0D8               	btfsc	status,0,c
  1091  00008A  EF49  F000         	goto	i2u11_41
  1092  00008E  EF4B  F000         	goto	i2u11_40
  1093  000092                     i2u11_41:
  1094  000092  EF4E  F000         	goto	i2l98
  1095  000096                     i2u11_40:
  1096  000096                     
  1097                           ;isr.c: 41:             LATAbits.LATA4 = 1;
  1098  000096  8889               	bsf	137,4,c	;volatile
  1099  000098  EF4F  F000         	goto	i2l968
  1100  00009C                     i2l98:
  1101  00009C  9889               	bcf	137,4,c	;volatile
  1102  00009E                     i2l968:
  1103                           
  1104                           ;isr.c: 44:         TMR0H = 0x00;
  1105  00009E  0E00               	movlw	0
  1106  0000A0  6ED7               	movwf	215,c	;volatile
  1107                           
  1108                           ;isr.c: 45:         TMR0L = 0xB2;
  1109  0000A2  0EB2               	movlw	178
  1110  0000A4  6ED6               	movwf	214,c	;volatile
  1111  0000A6                     
  1112                           ;isr.c: 47:         INTCONbits.TMR0IF = 0;
  1113  0000A6  94F2               	bcf	242,2,c	;volatile
  1114  0000A8                     i2l972:
  1115                           
  1116                           ;isr.c: 50:     if(INTCONbits.RBIE && INTCONbits.RBIF){
  1117  0000A8  A6F2               	btfss	242,3,c	;volatile
  1118  0000AA  EF59  F000         	goto	i2u12_41
  1119  0000AE  EF5B  F000         	goto	i2u12_40
  1120  0000B2                     i2u12_41:
  1121  0000B2  EFC9  F000         	goto	i2l107
  1122  0000B6                     i2u12_40:
  1123  0000B6  A0F2               	btfss	242,0,c	;volatile
  1124  0000B8  EF60  F000         	goto	i2u13_41
  1125  0000BC  EF62  F000         	goto	i2u13_40
  1126  0000C0                     i2u13_41:
  1127  0000C0  EFC9  F000         	goto	i2l107
  1128  0000C4                     i2u13_40:
  1129  0000C4                     
  1130                           ;isr.c: 51:         rotary.encoderState = PORTBbits.RB4 | PORTBbits.RB5 << 1;
  1131  0000C4  B881               	btfsc	129,4,c	;volatile
  1132  0000C6  EF67  F000         	goto	i2u14_41
  1133  0000CA  EF6B  F000         	goto	i2u14_40
  1134  0000CE                     i2u14_41:
  1135  0000CE  6A18               	clrf	??_INTERRUPT_Manager^0,c
  1136  0000D0  2A18               	incf	??_INTERRUPT_Manager^0,f,c
  1137  0000D2  EF6C  F000         	goto	i2u14_48
  1138  0000D6                     i2u14_40:
  1139  0000D6  6A18               	clrf	??_INTERRUPT_Manager^0,c
  1140  0000D8                     i2u14_48:
  1141  0000D8  BA81               	btfsc	129,5,c	;volatile
  1142  0000DA  EF71  F000         	goto	i2u15_41
  1143  0000DE  EF75  F000         	goto	i2u15_40
  1144  0000E2                     i2u15_41:
  1145  0000E2  6A19               	clrf	(??_INTERRUPT_Manager+1)^0,c
  1146  0000E4  2A19               	incf	(??_INTERRUPT_Manager+1)^0,f,c
  1147  0000E6  EF76  F000         	goto	i2u15_48
  1148  0000EA                     i2u15_40:
  1149  0000EA  6A19               	clrf	(??_INTERRUPT_Manager+1)^0,c
  1150  0000EC                     i2u15_48:
  1151  0000EC  90D8               	bcf	status,0,c
  1152  0000EE  3419               	rlcf	(??_INTERRUPT_Manager+1)^0,w,c
  1153  0000F0  1018               	iorwf	??_INTERRUPT_Manager^0,w,c
  1154  0000F2  6E05               	movwf	(_rotary+4)^0,c
  1155                           
  1156                           ;isr.c: 52:         if(rotary.encoderPreviousState != 0xFF ){
  1157  0000F4  2806               	incf	(_rotary+5)^0,w,c
  1158  0000F6  B4D8               	btfsc	status,2,c
  1159  0000F8  EF80  F000         	goto	i2u16_41
  1160  0000FC  EF82  F000         	goto	i2u16_40
  1161  000100                     i2u16_41:
  1162  000100  EFA9  F000         	goto	i2l990
  1163  000104                     i2u16_40:
  1164  000104                     
  1165                           ;isr.c: 53:             if(rotary.encoderPreviousState == 0b01 && rotary.encoderState ==
      +                           0b00){
  1166  000104  0406               	decf	(_rotary+5)^0,w,c
  1167  000106  A4D8               	btfss	status,2,c
  1168  000108  EF88  F000         	goto	i2u17_41
  1169  00010C  EF8A  F000         	goto	i2u17_40
  1170  000110                     i2u17_41:
  1171  000110  EF97  F000         	goto	i2l984
  1172  000114                     i2u17_40:
  1173  000114  5005               	movf	(_rotary+4)^0,w,c
  1174  000116  A4D8               	btfss	status,2,c
  1175  000118  EF90  F000         	goto	i2u18_41
  1176  00011C  EF92  F000         	goto	i2u18_40
  1177  000120                     i2u18_41:
  1178  000120  EF97  F000         	goto	i2l984
  1179  000124                     i2u18_40:
  1180  000124                     
  1181                           ;isr.c: 56:                 rotary.encoderPosition--;
  1182  000124  0601               	decf	_rotary^0,f,c
  1183  000126  A0D8               	btfss	status,0,c
  1184  000128  0602               	decf	(_rotary+1)^0,f,c
  1185                           
  1186                           ;isr.c: 57:                 }
  1187  00012A  EFA9  F000         	goto	i2l990
  1188  00012E                     i2l984:
  1189  00012E  5006               	movf	(_rotary+5)^0,w,c
  1190  000130  A4D8               	btfss	status,2,c
  1191  000132  EF9D  F000         	goto	i2u19_41
  1192  000136  EF9F  F000         	goto	i2u19_40
  1193  00013A                     i2u19_41:
  1194  00013A  EFA9  F000         	goto	i2l990
  1195  00013E                     i2u19_40:
  1196  00013E  0405               	decf	(_rotary+4)^0,w,c
  1197  000140  A4D8               	btfss	status,2,c
  1198  000142  EFA5  F000         	goto	i2u20_41
  1199  000146  EFA7  F000         	goto	i2u20_40
  1200  00014A                     i2u20_41:
  1201  00014A  EFA9  F000         	goto	i2l990
  1202  00014E                     i2u20_40:
  1203  00014E                     
  1204                           ;isr.c: 61:                 rotary.encoderPosition++;
  1205  00014E  4A01               	infsnz	_rotary^0,f,c
  1206  000150  2A02               	incf	(_rotary+1)^0,f,c
  1207  000152                     i2l990:
  1208                           
  1209                           ;isr.c: 65:             rotary.encoderPreviousState = rotary.encoderState;
  1210  000152  C005  F006         	movff	_rotary+4,_rotary+5
  1211  000156                     
  1212                           ;isr.c: 66:             if (rotary.encoderPosition > 25) rotary.encoderPosition = 25;
  1213  000156  BE02               	btfsc	(_rotary+1)^0,7,c
  1214  000158  EFB7  F000         	goto	i2u21_41
  1215  00015C  5002               	movf	(_rotary+1)^0,w,c
  1216  00015E  E109               	bnz	i2u21_40
  1217  000160  0E1A               	movlw	26
  1218  000162  5C01               	subwf	_rotary^0,w,c
  1219  000164  A0D8               	btfss	status,0,c
  1220  000166  EFB7  F000         	goto	i2u21_41
  1221  00016A  EFB9  F000         	goto	i2u21_40
  1222  00016E                     i2u21_41:
  1223  00016E  EFBD  F000         	goto	i2l996
  1224  000172                     i2u21_40:
  1225  000172  0E00               	movlw	0
  1226  000174  6E02               	movwf	(_rotary+1)^0,c
  1227  000176  0E19               	movlw	25
  1228  000178  6E01               	movwf	_rotary^0,c
  1229  00017A                     i2l996:
  1230                           
  1231                           ;isr.c: 67:             if (rotary.encoderPosition < 0) rotary.encoderPosition = 0;
  1232  00017A  BE02               	btfsc	(_rotary+1)^0,7,c
  1233  00017C  EFC4  F000         	goto	i2u22_40
  1234  000180  EFC2  F000         	goto	i2u22_41
  1235  000184                     i2u22_41:
  1236  000184  EFC8  F000         	goto	i2l1000
  1237  000188                     i2u22_40:
  1238  000188  0E00               	movlw	0
  1239  00018A  6E02               	movwf	(_rotary+1)^0,c
  1240  00018C  0E00               	movlw	0
  1241  00018E  6E01               	movwf	_rotary^0,c
  1242  000190                     i2l1000:
  1243                           
  1244                           ;isr.c: 68:         INTCONbits.RBIF=0;
  1245  000190  90F2               	bcf	242,0,c	;volatile
  1246  000192                     i2l107:
  1247  000192  9225               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1248  000194  0011               	retfie		f
  1249  000196                     __end_of_INTERRUPT_Manager:
  1250                           	callstack 0
  1251  0000                     
  1252                           	psect	rparam
  1253  0000                     
  1254                           	psect	temp
  1255  000025                     btemp:
  1256                           	callstack 0
  1257  000025                     	ds	1
  1258  0000                     int$flags	set	btemp
  1259  0000                     wtemp8	set	btemp+1
  1260  0000                     ttemp5	set	btemp+1
  1261  0000                     ttemp6	set	btemp+4
  1262  0000                     ttemp7	set	btemp+8
  1263                           
  1264                           	psect	idloc
  1265                           
  1266                           ;Config register IDLOC0 @ 0x200000
  1267                           ;	unspecified, using default values
  1268  200000                     	org	2097152
  1269  200000  FF                 	db	255
  1270                           
  1271                           ;Config register IDLOC1 @ 0x200001
  1272                           ;	unspecified, using default values
  1273  200001                     	org	2097153
  1274  200001  FF                 	db	255
  1275                           
  1276                           ;Config register IDLOC2 @ 0x200002
  1277                           ;	unspecified, using default values
  1278  200002                     	org	2097154
  1279  200002  FF                 	db	255
  1280                           
  1281                           ;Config register IDLOC3 @ 0x200003
  1282                           ;	unspecified, using default values
  1283  200003                     	org	2097155
  1284  200003  FF                 	db	255
  1285                           
  1286                           ;Config register IDLOC4 @ 0x200004
  1287                           ;	unspecified, using default values
  1288  200004                     	org	2097156
  1289  200004  FF                 	db	255
  1290                           
  1291                           ;Config register IDLOC5 @ 0x200005
  1292                           ;	unspecified, using default values
  1293  200005                     	org	2097157
  1294  200005  FF                 	db	255
  1295                           
  1296                           ;Config register IDLOC6 @ 0x200006
  1297                           ;	unspecified, using default values
  1298  200006                     	org	2097158
  1299  200006  FF                 	db	255
  1300                           
  1301                           ;Config register IDLOC7 @ 0x200007
  1302                           ;	unspecified, using default values
  1303  200007                     	org	2097159
  1304  200007  FF                 	db	255
  1305                           
  1306                           	psect	config
  1307                           
  1308                           ; Padding undefined space
  1309  300000                     	org	3145728
  1310  300000  FF                 	db	255
  1311                           
  1312                           ;Config register CONFIG1H @ 0x300001
  1313                           ;	Oscillator Selection bits
  1314                           ;	FOSC = INTIO67, Internal oscillator block
  1315                           ;	4X PLL Enable
  1316                           ;	PLLCFG = OFF, Oscillator used directly
  1317                           ;	Primary clock enable bit
  1318                           ;	PRICLKEN = ON, Primary clock enabled
  1319                           ;	Fail-Safe Clock Monitor Enable bit
  1320                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1321                           ;	Internal/External Oscillator Switchover bit
  1322                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1323  300001                     	org	3145729
  1324  300001  28                 	db	40
  1325                           
  1326                           ;Config register CONFIG2L @ 0x300002
  1327                           ;	Power-up Timer Enable bit
  1328                           ;	PWRTEN = OFF, Power up timer disabled
  1329                           ;	Brown-out Reset Enable bits
  1330                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  1331                           ;	Brown Out Reset Voltage bits
  1332                           ;	BORV = 190, VBOR set to 1.90 V nominal
  1333  300002                     	org	3145730
  1334  300002  19                 	db	25
  1335                           
  1336                           ;Config register CONFIG2H @ 0x300003
  1337                           ;	Watchdog Timer Enable bits
  1338                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
  1339                           ;	Watchdog Timer Postscale Select bits
  1340                           ;	WDTPS = 32768, 1:32768
  1341  300003                     	org	3145731
  1342  300003  3C                 	db	60
  1343                           
  1344                           ; Padding undefined space
  1345  300004                     	org	3145732
  1346  300004  FF                 	db	255
  1347                           
  1348                           ;Config register CONFIG3H @ 0x300005
  1349                           ;	CCP2 MUX bit
  1350                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
  1351                           ;	PORTB A/D Enable bit
  1352                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
  1353                           ;	P3A/CCP3 Mux bit
  1354                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
  1355                           ;	HFINTOSC Fast Start-up
  1356                           ;	HFOFST = OFF, HFINTOSC output and ready status are delayed by the oscillator stable st
      +                          atus
  1357                           ;	Timer3 Clock input mux bit
  1358                           ;	T3CMX = PORTC0, T3CKI is on RC0
  1359                           ;	ECCP2 B output mux bit
  1360                           ;	P2BMX = PORTB5, P2B is on RB5
  1361                           ;	MCLR Pin Enable bit
  1362                           ;	MCLRE = INTMCLR, RE3 input pin enabled; MCLR disabled
  1363  300005                     	org	3145733
  1364  300005  35                 	db	53
  1365                           
  1366                           ;Config register CONFIG4L @ 0x300006
  1367                           ;	Stack Full/Underflow Reset Enable bit
  1368                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1369                           ;	Single-Supply ICSP Enable bit
  1370                           ;	LVP = OFF, Single-Supply ICSP disabled
  1371                           ;	Extended Instruction Set Enable bit
  1372                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1373                           ;	Background Debug
  1374                           ;	DEBUG = 0x1, unprogrammed default
  1375  300006                     	org	3145734
  1376  300006  81                 	db	129
  1377                           
  1378                           ; Padding undefined space
  1379  300007                     	org	3145735
  1380  300007  FF                 	db	255
  1381                           
  1382                           ;Config register CONFIG5L @ 0x300008
  1383                           ;	Code Protection Block 0
  1384                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  1385                           ;	Code Protection Block 1
  1386                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  1387                           ;	Code Protection Block 2
  1388                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  1389                           ;	Code Protection Block 3
  1390                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  1391  300008                     	org	3145736
  1392  300008  0F                 	db	15
  1393                           
  1394                           ;Config register CONFIG5H @ 0x300009
  1395                           ;	Boot Block Code Protection bit
  1396                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1397                           ;	Data EEPROM Code Protection bit
  1398                           ;	CPD = OFF, Data EEPROM not code-protected
  1399  300009                     	org	3145737
  1400  300009  C0                 	db	192
  1401                           
  1402                           ;Config register CONFIG6L @ 0x30000A
  1403                           ;	Write Protection Block 0
  1404                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  1405                           ;	Write Protection Block 1
  1406                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  1407                           ;	Write Protection Block 2
  1408                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  1409                           ;	Write Protection Block 3
  1410                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  1411  30000A                     	org	3145738
  1412  30000A  0F                 	db	15
  1413                           
  1414                           ;Config register CONFIG6H @ 0x30000B
  1415                           ;	Configuration Register Write Protection bit
  1416                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1417                           ;	Boot Block Write Protection bit
  1418                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  1419                           ;	Data EEPROM Write Protection bit
  1420                           ;	WRTD = OFF, Data EEPROM not write-protected
  1421  30000B                     	org	3145739
  1422  30000B  E0                 	db	224
  1423                           
  1424                           ;Config register CONFIG7L @ 0x30000C
  1425                           ;	Table Read Protection Block 0
  1426                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  1427                           ;	Table Read Protection Block 1
  1428                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  1429                           ;	Table Read Protection Block 2
  1430                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  1431                           ;	Table Read Protection Block 3
  1432                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1433  30000C                     	org	3145740
  1434  30000C  0F                 	db	15
  1435                           
  1436                           ;Config register CONFIG7H @ 0x30000D
  1437                           ;	Boot Block Table Read Protection bit
  1438                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1439  30000D                     	org	3145741
  1440  30000D  40                 	db	64
  1441                           tosu	equ	0xFFF
  1442                           tosh	equ	0xFFE
  1443                           tosl	equ	0xFFD
  1444                           stkptr	equ	0xFFC
  1445                           pclatu	equ	0xFFB
  1446                           pclath	equ	0xFFA
  1447                           pcl	equ	0xFF9
  1448                           tblptru	equ	0xFF8
  1449                           tblptrh	equ	0xFF7
  1450                           tblptrl	equ	0xFF6
  1451                           tablat	equ	0xFF5
  1452                           prodh	equ	0xFF4
  1453                           prodl	equ	0xFF3
  1454                           indf0	equ	0xFEF
  1455                           postinc0	equ	0xFEE
  1456                           postdec0	equ	0xFED
  1457                           preinc0	equ	0xFEC
  1458                           plusw0	equ	0xFEB
  1459                           fsr0h	equ	0xFEA
  1460                           fsr0l	equ	0xFE9
  1461                           wreg	equ	0xFE8
  1462                           indf1	equ	0xFE7
  1463                           postinc1	equ	0xFE6
  1464                           postdec1	equ	0xFE5
  1465                           preinc1	equ	0xFE4
  1466                           plusw1	equ	0xFE3
  1467                           fsr1h	equ	0xFE2
  1468                           fsr1l	equ	0xFE1
  1469                           bsr	equ	0xFE0
  1470                           indf2	equ	0xFDF
  1471                           postinc2	equ	0xFDE
  1472                           postdec2	equ	0xFDD
  1473                           preinc2	equ	0xFDC
  1474                           plusw2	equ	0xFDB
  1475                           fsr2h	equ	0xFDA
  1476                           fsr2l	equ	0xFD9
  1477                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        78
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     13      36
    BANK0           160      0      78
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_IO_ENCODERSetColors
    _IO_ENCODERSetColors->_PWM_SetDutty
    _PWM_SetDutty->___wmul

Critical Paths under _INTERRUPT_Manager in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_Manager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_Manager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_Manager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_Manager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_Manager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_Manager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1508
                 _ENCODER_SwitchRead
                _IO_ENCODERSetColors
                           _MCU_Init
 ---------------------------------------------------------------------------------
 (1) _MCU_Init                                             0     0      0       0
                       _ENCODER_Init
                   _INTERRUPT_Enable
                           _PWM_Init
 ---------------------------------------------------------------------------------
 (2) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Enable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ENCODER_Init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IO_ENCODERSetColors                                  2     2      0    1508
                                             11 COMRAM     2     2      0
                       _PWM_SetDutty
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     615
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _PWM_SetDutty                                         3     1      2     826
                                              8 COMRAM     3     1      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _ENCODER_SwitchRead                                   2     2      0       0
                                              2 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Manager                                    2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ENCODER_SwitchRead
   _IO_ENCODERSetColors
     _PWM_SetDutty
       ___wmul (ARG)
     ___wmul
   _MCU_Init
     _ENCODER_Init
     _INTERRUPT_Enable
     _PWM_Init

 _INTERRUPT_Manager (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      4E       4       48.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      D      24       1       38.3%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      72       9        0.0%
DATA                 0      0      72      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Sun Aug 02 14:26:32 2020

         __end_of_ENCODER_SwitchRead 0352                __size_of_PWM_SetDutty 0010  
                                 l41 03C6                                   l35 0394  
                                 l45 0350                                   l38 03B8  
                                 l48 029A                                   l84 03CE  
                                 u10 0332                                   u11 032E  
                ___wmul@multiplicand 001C                                  l164 0222  
                                l167 0376                                  l840 0378  
                                l842 0382                                  l844 038E  
                                l870 033A                                  l846 0390  
                                l856 03BA                                  l848 0392  
                                l880 01D2                                  l866 0324  
                                l858 03C8                                  l882 01D4  
                                l868 0332                                  l884 01D6  
                                l876 019A                                  l886 01F0  
                                l878 01D0                                  l888 0216  
                                u277 0344            __size_of_INTERRUPT_Enable 0008  
                                wreg 000FE8                                 l1010 03B0  
                               l1012 03B4                                 l1020 0224  
                               l1014 0352                                 l1022 022C  
                               l1008 03AC                                 l1016 036E  
                               l1080 039A                                 l1082 039E  
                               l1078 0396                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               i2l94 0060                                 i2l96 007E  
                               i2l98 009C                 PWM_SetDutty@colorRed 0022  
                               _main 0396                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 0025                                 prodh 000FF4  
                               prodl 000FF3                                 start 0196  
                       _PWM_SetDutty 03AA                 __end_of_ENCODER_Init 03C8  
                       ___param_bank 000000          __end_of_IO_ENCODERSetColors 029C  
                              ?_main 0018                     __end_of_MCU_Init 0224  
                              i2l107 0192                                i2l950 0026  
                              i2l960 0062                                i2l952 0038  
                              i2l970 00A6                                i2l962 0078  
                              i2l954 0040                                i2l946 000A  
                              i2l980 0114                                i2l964 0080  
                              i2l956 0044                                i2l948 0018  
                              i2l972 00A8                                i2l982 0124  
                              i2l990 0152                                i2l974 00B6  
                              i2l966 0096                                i2l958 005A  
                              i2l992 0156                                i2l984 012E  
                              i2l976 00C4                                i2l968 009E  
                              i2l994 0172                                i2l986 013E  
                              i2l978 0104                                i2l996 017A  
                              i2l988 014E                                i2l998 0188  
                              _TMR0H 000FD7                                _TMR0L 000FD6  
                              _PORTA 000F80                                _PORTB 000F81  
                              _PORTC 000F82                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
              PWM_SetDutty@colorBlue 0021                                _Ticks 0012  
                              _color 0016                     __end_of_PWM_Init 0396  
                              tablat 000FF5                                ttemp5 0026  
                              ttemp6 0029                                ttemp7 002D  
                              status 000FD8                                wtemp8 0026  
                    __initialization 02EA                         __end_of_main 03AA  
                             ??_main 0025                        __activetblptr 000002  
                             _ANSELA 000F38                               _ANSELB 000F39  
                             _ANSELC 000F3A                               i2l1000 0190  
                             i2u6_40 0018                               i2u6_41 0014  
                             i2u7_40 0026                               i2u7_41 0022  
                             i2u8_40 0038                               i2u8_41 0034  
                             i2u9_40 005A                               i2u9_41 0056  
             PWM_SetDutty@colorGreen 0020                               ___wmul 0352  
                             _colors 0060                               clear_0 0310  
                             _rotary 0001                     _INTERRUPT_Enable 03C8  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                __size_of_ENCODER_Init 000E  
                         __accesstop 0060              __end_of__initialization 0316  
                      ___rparam_used 000001                            ?_MCU_Init 0018  
                     __pcstackCOMRAM 0018                         __pidataBANK0 029C  
                          ?_PWM_Init 0018                   _ENCODER_SwitchRead 0324  
                       _ENCODER_Init 03BA                  ?_ENCODER_SwitchRead 0018  
                         ??_MCU_Init 001A                              ?___wmul 001A  
               ??_ENCODER_SwitchRead 001A                           ??_PWM_Init 001A  
                            i2u10_40 0078                              i2u10_41 0074  
                            i2u11_40 0096                              i2u11_41 0092  
                            i2u20_40 014E                              i2u12_40 00B6  
                            i2u20_41 014A                              i2u12_41 00B2  
                            i2u21_40 0172                              i2u13_40 00C4  
                            i2u21_41 016E                              i2u13_41 00C0  
                            i2u22_40 0188                              i2u14_40 00D6  
                            i2u22_41 0184                              i2u14_41 00CE  
                            i2u15_40 00EA                              i2u14_48 00D8  
                            i2u15_41 00E2                              i2u16_40 0104  
                            i2u15_48 00EC                              i2u16_41 0100  
                            i2u17_40 0114                              i2u17_41 0110  
                            i2u18_40 0124                              i2u18_41 0120  
                            i2u19_40 013E                              i2u19_41 013A  
                            __Hparam 0000                              __Lparam 0000  
                    __size_of___wmul 0026                           _levelColor 0017  
                            __pcinit 02EA                              __ramtop 0600  
                            __ptext0 0396                              __ptext1 019A  
                            __ptext2 0378                              __ptext3 03C8  
                            __ptext4 03BA                              __ptext5 0224  
                            __ptext6 0352                              __ptext7 03AA  
                            __ptext8 0324                            _T0CONbits 000FD5  
       __size_of_IO_ENCODERSetColors 0078                 end_of_initialization 0316  
                      __Lmediumconst 0000                    _INTERRUPT_Manager 0008  
           __end_of_INTERRUPT_Enable 03D0                   ?_INTERRUPT_Manager 0018  
                            postdec1 000FE5                              postinc0 000FEE  
                ??_INTERRUPT_Manager 0018                            _PORTBbits 000F81  
                          _PORTCbits 000F82            __end_of_INTERRUPT_Manager 0196  
                  __size_of_MCU_Init 008A  IO_ENCODERSetColors@currentLedNumber 0023  
                     __end_of___wmul 0378                    __size_of_PWM_Init 001E  
                start_initialization 02EA                        ?_PWM_SetDutty 0020  
                           ??___wmul 001E                          __pdataBANK0 0060  
                        __pbssCOMRAM 0001           __size_of_INTERRUPT_Manager 018E  
                     ??_PWM_SetDutty 0022                  _IO_ENCODERSetColors 0224  
                          __pintcode 0008          __size_of_ENCODER_SwitchRead 002E  
               ?_IO_ENCODERSetColors 0018                       ___wmul@product 001E  
                           _IOCBbits 000F62                             _LATAbits 000F89  
                           _LATCbits 000F8B                             _MCU_Init 019A  
                  ?_INTERRUPT_Enable 0018                             _RCONbits 000FD0  
                 ??_INTERRUPT_Enable 001A                             _PWMDutty 000E  
                           _PWM_Init 0378                    ___wmul@multiplier 001A  
              ??_IO_ENCODERSetColors 0023                          _INTCON2bits 000FF1  
                          copy_data0 02FE                             __Hrparam 0000  
                           __Lrparam 0000                 __end_of_PWM_SetDutty 03BA  
                      ?_ENCODER_Init 0018                        __size_of_main 0014  
                           _ticksRGB 0014                             int$flags 0025  
                     ??_ENCODER_Init 001A                           _INTCONbits 000FF2  
                           intlevel2 0000                           _OSCCONbits 000FD3  
